// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "user": user Resource Client
//
// Command:
// $ goagen
// --design=github.com/Microkubes/microservice-user/design
// --out=$(GOPATH)/src/github.com/Microkubes/microservice-user
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateUserPath computes a request path to the create action of user.
func CreateUserPath() string {

	return fmt.Sprintf("/users")
}

// Creates user
func (c *Client) CreateUser(ctx context.Context, path string, payload *CreateUserPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateUserRequest create the request corresponding to the create action endpoint of the user resource.
func (c *Client) NewCreateUserRequest(ctx context.Context, path string, payload *CreateUserPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// FindUserPath computes a request path to the find action of user.
func FindUserPath() string {

	return fmt.Sprintf("/users/find")
}

// Find a user by email+password
func (c *Client) FindUser(ctx context.Context, path string, payload *Credentials, contentType string) (*http.Response, error) {
	req, err := c.NewFindUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewFindUserRequest create the request corresponding to the find action endpoint of the user resource.
func (c *Client) NewFindUserRequest(ctx context.Context, path string, payload *Credentials, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// FindByEmailUserPath computes a request path to the findByEmail action of user.
func FindByEmailUserPath() string {

	return fmt.Sprintf("/users/find/email")
}

// Find a user by email
func (c *Client) FindByEmailUser(ctx context.Context, path string, payload *EmailPayload, contentType string) (*http.Response, error) {
	req, err := c.NewFindByEmailUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewFindByEmailUserRequest create the request corresponding to the findByEmail action endpoint of the user resource.
func (c *Client) NewFindByEmailUserRequest(ctx context.Context, path string, payload *EmailPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// FindUsersUserPath computes a request path to the findUsers action of user.
func FindUsersUserPath() string {

	return fmt.Sprintf("/users/list")
}

// Find (filter) users by some filter.
func (c *Client) FindUsersUser(ctx context.Context, path string, payload *FilterPayload, contentType string) (*http.Response, error) {
	req, err := c.NewFindUsersUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewFindUsersUserRequest create the request corresponding to the findUsers action endpoint of the user resource.
func (c *Client) NewFindUsersUserRequest(ctx context.Context, path string, payload *FilterPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ForgotPasswordUserPath computes a request path to the forgotPassword action of user.
func ForgotPasswordUserPath() string {

	return fmt.Sprintf("/users/password/forgot")
}

// Forgot password action (sending email to user with link for resseting password)
func (c *Client) ForgotPasswordUser(ctx context.Context, path string, payload *EmailPayload, contentType string) (*http.Response, error) {
	req, err := c.NewForgotPasswordUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewForgotPasswordUserRequest create the request corresponding to the forgotPassword action endpoint of the user resource.
func (c *Client) NewForgotPasswordUserRequest(ctx context.Context, path string, payload *EmailPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ForgotPasswordUpdateUserPath computes a request path to the forgotPasswordUpdate action of user.
func ForgotPasswordUpdateUserPath() string {

	return fmt.Sprintf("/users/password/forgot")
}

// Password token validation & password update
func (c *Client) ForgotPasswordUpdateUser(ctx context.Context, path string, payload *ForgotPasswordPayload, contentType string) (*http.Response, error) {
	req, err := c.NewForgotPasswordUpdateUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewForgotPasswordUpdateUserRequest create the request corresponding to the forgotPasswordUpdate action endpoint of the user resource.
func (c *Client) NewForgotPasswordUpdateUserRequest(ctx context.Context, path string, payload *ForgotPasswordPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// GetUserPath computes a request path to the get action of user.
func GetUserPath(userID string) string {
	param0 := userID

	return fmt.Sprintf("/users/%s", param0)
}

// Get user by id
func (c *Client) GetUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetUserRequest create the request corresponding to the get action endpoint of the user resource.
func (c *Client) NewGetUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetAllUserPath computes a request path to the getAll action of user.
func GetAllUserPath() string {

	return fmt.Sprintf("/users")
}

// Retrieves all active users
func (c *Client) GetAllUser(ctx context.Context, path string, limit *int, offset *int, order *string, sorting *string) (*http.Response, error) {
	req, err := c.NewGetAllUserRequest(ctx, path, limit, offset, order, sorting)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetAllUserRequest create the request corresponding to the getAll action endpoint of the user resource.
func (c *Client) NewGetAllUserRequest(ctx context.Context, path string, limit *int, offset *int, order *string, sorting *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if limit != nil {
		tmp13 := strconv.Itoa(*limit)
		values.Set("limit", tmp13)
	}
	if offset != nil {
		tmp14 := strconv.Itoa(*offset)
		values.Set("offset", tmp14)
	}
	if order != nil {
		values.Set("order", *order)
	}
	if sorting != nil {
		values.Set("sorting", *sorting)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetMeUserPath computes a request path to the getMe action of user.
func GetMeUserPath() string {

	return fmt.Sprintf("/users/me")
}

// Retrieves the user information for the authenticated user
func (c *Client) GetMeUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetMeUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetMeUserRequest create the request corresponding to the getMe action endpoint of the user resource.
func (c *Client) NewGetMeUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ResetVerificationTokenUserPath computes a request path to the resetVerificationToken action of user.
func ResetVerificationTokenUserPath() string {

	return fmt.Sprintf("/users/verification/reset")
}

// Reset verification token
func (c *Client) ResetVerificationTokenUser(ctx context.Context, path string, payload *EmailPayload, contentType string) (*http.Response, error) {
	req, err := c.NewResetVerificationTokenUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewResetVerificationTokenUserRequest create the request corresponding to the resetVerificationToken action endpoint of the user resource.
func (c *Client) NewResetVerificationTokenUserRequest(ctx context.Context, path string, payload *EmailPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// UpdateUserPath computes a request path to the update action of user.
func UpdateUserPath(userID string) string {
	param0 := userID

	return fmt.Sprintf("/users/%s", param0)
}

// Update user
func (c *Client) UpdateUser(ctx context.Context, path string, payload *UpdateUserPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateUserRequest create the request corresponding to the update action endpoint of the user resource.
func (c *Client) NewUpdateUserRequest(ctx context.Context, path string, payload *UpdateUserPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// VerifyUserPath computes a request path to the verify action of user.
func VerifyUserPath() string {

	return fmt.Sprintf("/users/verify")
}

// Verify a user by token
func (c *Client) VerifyUser(ctx context.Context, path string, token *string) (*http.Response, error) {
	req, err := c.NewVerifyUserRequest(ctx, path, token)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewVerifyUserRequest create the request corresponding to the verify action endpoint of the user resource.
func (c *Client) NewVerifyUserRequest(ctx context.Context, path string, token *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if token != nil {
		values.Set("token", *token)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
