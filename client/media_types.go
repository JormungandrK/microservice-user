// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "user": Application Media Types
//
// Command:
// $ goagen
// --design=user-microservice/design
// --out=$(GOPATH)/src/user-microservice
// --version=v1.2.0-dirty

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"unicode/utf8"
)

// users media type (default view)
//
// Identifier: application/vnd.goa.user+json; view=default
type Users struct {
	// Status of user account
	Active bool `form:"active" json:"active" xml:"active"`
	// Email of user
	Email string `form:"email" json:"email" xml:"email"`
	// External id of user
	ExternalID string `form:"externalId" json:"externalId" xml:"externalId"`
	// Unique user ID
	ID int `form:"id" json:"id" xml:"id"`
	// Roles of user
	Roles []string `form:"roles" json:"roles" xml:"roles"`
	// Name of user
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate validates the Users media type instance.
func (mt *Users) Validate() (err error) {

	if mt.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "username"))
	}
	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}
	if mt.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "roles"))
	}
	if mt.ExternalID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "externalId"))
	}

	if err2 := goa.ValidateFormat(goa.FormatEmail, mt.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`response.email`, mt.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(mt.Username) < 4 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.username`, mt.Username, utf8.RuneCountInString(mt.Username), 4, true))
	}
	if utf8.RuneCountInString(mt.Username) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.username`, mt.Username, utf8.RuneCountInString(mt.Username), 50, false))
	}
	return
}

// DecodeUsers decodes the Users instance encoded in resp body.
func (c *Client) DecodeUsers(resp *http.Response) (*Users, error) {
	var decoded Users
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
