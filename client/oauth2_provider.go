// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "user": oauth2_provider Resource Client
//
// Command:
// $ goagen
// --design=github.com/JormungandrK/user-microservice/design
// --out=$(GOPATH)/src/github.com/JormungandrK/user-microservice
// --version=v1.2.0-dirty

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// AuthorizeOauth2ProviderPath computes a request path to the authorize action of oauth2_provider.
func AuthorizeOauth2ProviderPath() string {

	return fmt.Sprintf("/oauth2/authorize")
}

// Authorize OAuth2 client
func (c *Client) AuthorizeOauth2Provider(ctx context.Context, path string, clientID string, responseType string, redirectURI *string, scope *string, state *string) (*http.Response, error) {
	req, err := c.NewAuthorizeOauth2ProviderRequest(ctx, path, clientID, responseType, redirectURI, scope, state)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAuthorizeOauth2ProviderRequest create the request corresponding to the authorize action endpoint of the oauth2_provider resource.
func (c *Client) NewAuthorizeOauth2ProviderRequest(ctx context.Context, path string, clientID string, responseType string, redirectURI *string, scope *string, state *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("client_id", clientID)
	values.Set("response_type", responseType)
	if redirectURI != nil {
		values.Set("redirect_uri", *redirectURI)
	}
	if scope != nil {
		values.Set("scope", *scope)
	}
	if state != nil {
		values.Set("state", *state)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetTokenOauth2ProviderPath computes a request path to the get_token action of oauth2_provider.
func GetTokenOauth2ProviderPath() string {

	return fmt.Sprintf("/oauth2/token")
}

// Get access token from authorization code or refresh token
func (c *Client) GetTokenOauth2Provider(ctx context.Context, path string, payload *TokenPayload, contentType string) (*http.Response, error) {
	req, err := c.NewGetTokenOauth2ProviderRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetTokenOauth2ProviderRequest create the request corresponding to the get_token action endpoint of the oauth2_provider resource.
func (c *Client) NewGetTokenOauth2ProviderRequest(ctx context.Context, path string, payload *TokenPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.Oauth2ClientBasicAuthSigner != nil {
		c.Oauth2ClientBasicAuthSigner.Sign(req)
	}
	return req, nil
}
