// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "user": Application User Types
//
// Command:
// $ goagen
// --design=github.com/Microkubes/microservice-user/design
// --out=$(GOPATH)/src/github.com/Microkubes/microservice-user
// --version=v1.3.1

package app

import (
	"github.com/keitaroinc/goa"
	"unicode/utf8"
)

// CreateUserPayload
type createUserPayload struct {
	// Status of user account
	Active *bool `form:"active,omitempty" json:"active,omitempty" yaml:"active,omitempty" xml:"active,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// External id of user
	ExternalID *string `form:"externalId,omitempty" json:"externalId,omitempty" yaml:"externalId,omitempty" xml:"externalId,omitempty"`
	// List of namespaces this user belongs to
	Namespaces []string `form:"namespaces,omitempty" json:"namespaces,omitempty" yaml:"namespaces,omitempty" xml:"namespaces,omitempty"`
	// List of organizations to which this user belongs to
	Organizations []string `form:"organizations,omitempty" json:"organizations,omitempty" yaml:"organizations,omitempty" xml:"organizations,omitempty"`
	// Password of user
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	// Roles of user
	Roles []string `form:"roles,omitempty" json:"roles,omitempty" yaml:"roles,omitempty" xml:"roles,omitempty"`
	// Token for email verification
	Token *string `form:"token,omitempty" json:"token,omitempty" yaml:"token,omitempty" xml:"token,omitempty"`
}

// Finalize sets the default values for createUserPayload type instance.
func (ut *createUserPayload) Finalize() {
	var defaultActive = false
	if ut.Active == nil {
		ut.Active = &defaultActive
	}
}

// Validate validates the createUserPayload type instance.
func (ut *createUserPayload) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 6, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 30, false))
		}
	}
	return
}

// Publicize creates CreateUserPayload from createUserPayload
func (ut *createUserPayload) Publicize() *CreateUserPayload {
	var pub CreateUserPayload
	if ut.Active != nil {
		pub.Active = *ut.Active
	}
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.ExternalID != nil {
		pub.ExternalID = ut.ExternalID
	}
	if ut.Namespaces != nil {
		pub.Namespaces = ut.Namespaces
	}
	if ut.Organizations != nil {
		pub.Organizations = ut.Organizations
	}
	if ut.Password != nil {
		pub.Password = ut.Password
	}
	if ut.Roles != nil {
		pub.Roles = ut.Roles
	}
	if ut.Token != nil {
		pub.Token = ut.Token
	}
	return &pub
}

// CreateUserPayload
type CreateUserPayload struct {
	// Status of user account
	Active bool `form:"active" json:"active" yaml:"active" xml:"active"`
	// Email of user
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// External id of user
	ExternalID *string `form:"externalId,omitempty" json:"externalId,omitempty" yaml:"externalId,omitempty" xml:"externalId,omitempty"`
	// List of namespaces this user belongs to
	Namespaces []string `form:"namespaces,omitempty" json:"namespaces,omitempty" yaml:"namespaces,omitempty" xml:"namespaces,omitempty"`
	// List of organizations to which this user belongs to
	Organizations []string `form:"organizations,omitempty" json:"organizations,omitempty" yaml:"organizations,omitempty" xml:"organizations,omitempty"`
	// Password of user
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	// Roles of user
	Roles []string `form:"roles,omitempty" json:"roles,omitempty" yaml:"roles,omitempty" xml:"roles,omitempty"`
	// Token for email verification
	Token *string `form:"token,omitempty" json:"token,omitempty" yaml:"token,omitempty" xml:"token,omitempty"`
}

// Validate validates the CreateUserPayload type instance.
func (ut *CreateUserPayload) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 6, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 30, false))
		}
	}
	return
}

// Email and password credentials
type credentials struct {
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// Password of user
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the credentials type instance.
func (ut *credentials) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 6, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 30, false))
		}
	}
	return
}

// Publicize creates Credentials from credentials
func (ut *credentials) Publicize() *Credentials {
	var pub Credentials
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// Email and password credentials
type Credentials struct {
	// Email of user
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// Password of user
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the Credentials type instance.
func (ut *Credentials) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.Password) < 6 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 6, true))
	}
	if utf8.RuneCountInString(ut.Password) > 30 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 30, false))
	}
	return
}

// Email payload
type emailPayload struct {
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
}

// Validate validates the emailPayload type instance.
func (ut *emailPayload) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	return
}

// Publicize creates EmailPayload from emailPayload
func (ut *emailPayload) Publicize() *EmailPayload {
	var pub EmailPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	return &pub
}

// Email payload
type EmailPayload struct {
	// Email of user
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
}

// Validate validates the EmailPayload type instance.
func (ut *EmailPayload) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	return
}

// filterPayload user type.
type filterPayload struct {
	// Users filter.
	Filter []*filterProperty `form:"filter,omitempty" json:"filter,omitempty" yaml:"filter,omitempty" xml:"filter,omitempty"`
	// Page number (1-based).
	Page *int `form:"page,omitempty" json:"page,omitempty" yaml:"page,omitempty" xml:"page,omitempty"`
	// Items per page.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty" yaml:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// Sort specification.
	Sort *orderSpec `form:"sort,omitempty" json:"sort,omitempty" yaml:"sort,omitempty" xml:"sort,omitempty"`
}

// Validate validates the filterPayload type instance.
func (ut *filterPayload) Validate() (err error) {
	if ut.Page == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "page"))
	}
	if ut.PageSize == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "pageSize"))
	}
	for _, e := range ut.Filter {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if ut.Sort != nil {
		if err2 := ut.Sort.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates FilterPayload from filterPayload
func (ut *filterPayload) Publicize() *FilterPayload {
	var pub FilterPayload
	if ut.Filter != nil {
		pub.Filter = make([]*FilterProperty, len(ut.Filter))
		for i2, elem2 := range ut.Filter {
			pub.Filter[i2] = elem2.Publicize()
		}
	}
	if ut.Page != nil {
		pub.Page = *ut.Page
	}
	if ut.PageSize != nil {
		pub.PageSize = *ut.PageSize
	}
	if ut.Sort != nil {
		pub.Sort = ut.Sort.Publicize()
	}
	return &pub
}

// FilterPayload user type.
type FilterPayload struct {
	// Users filter.
	Filter []*FilterProperty `form:"filter,omitempty" json:"filter,omitempty" yaml:"filter,omitempty" xml:"filter,omitempty"`
	// Page number (1-based).
	Page int `form:"page" json:"page" yaml:"page" xml:"page"`
	// Items per page.
	PageSize int `form:"pageSize" json:"pageSize" yaml:"pageSize" xml:"pageSize"`
	// Sort specification.
	Sort *OrderSpec `form:"sort,omitempty" json:"sort,omitempty" yaml:"sort,omitempty" xml:"sort,omitempty"`
}

// Validate validates the FilterPayload type instance.
func (ut *FilterPayload) Validate() (err error) {

	for _, e := range ut.Filter {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if ut.Sort != nil {
		if err2 := ut.Sort.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// filterProperty user type.
type filterProperty struct {
	// Property name
	Property *string `form:"property,omitempty" json:"property,omitempty" yaml:"property,omitempty" xml:"property,omitempty"`
	// Property value to match
	Value *string `form:"value,omitempty" json:"value,omitempty" yaml:"value,omitempty" xml:"value,omitempty"`
}

// Validate validates the filterProperty type instance.
func (ut *filterProperty) Validate() (err error) {
	if ut.Property == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "property"))
	}
	if ut.Value == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "value"))
	}
	return
}

// Publicize creates FilterProperty from filterProperty
func (ut *filterProperty) Publicize() *FilterProperty {
	var pub FilterProperty
	if ut.Property != nil {
		pub.Property = *ut.Property
	}
	if ut.Value != nil {
		pub.Value = *ut.Value
	}
	return &pub
}

// FilterProperty user type.
type FilterProperty struct {
	// Property name
	Property string `form:"property" json:"property" yaml:"property" xml:"property"`
	// Property value to match
	Value string `form:"value" json:"value" yaml:"value" xml:"value"`
}

// Validate validates the FilterProperty type instance.
func (ut *FilterProperty) Validate() (err error) {
	if ut.Property == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "property"))
	}
	if ut.Value == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "value"))
	}
	return
}

// Password Reset payload
type forgotPasswordPayload struct {
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// New password
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	// Forgot password token
	Token *string `form:"token,omitempty" json:"token,omitempty" yaml:"token,omitempty" xml:"token,omitempty"`
}

// Validate validates the forgotPasswordPayload type instance.
func (ut *forgotPasswordPayload) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Token == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "token"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 6, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 30, false))
		}
	}
	return
}

// Publicize creates ForgotPasswordPayload from forgotPasswordPayload
func (ut *forgotPasswordPayload) Publicize() *ForgotPasswordPayload {
	var pub ForgotPasswordPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	if ut.Token != nil {
		pub.Token = *ut.Token
	}
	return &pub
}

// Password Reset payload
type ForgotPasswordPayload struct {
	// Email of the user
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// New password
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
	// Forgot password token
	Token string `form:"token" json:"token" yaml:"token" xml:"token"`
}

// Validate validates the ForgotPasswordPayload type instance.
func (ut *ForgotPasswordPayload) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if ut.Token == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "token"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.Password) < 6 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 6, true))
	}
	if utf8.RuneCountInString(ut.Password) > 30 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 30, false))
	}
	return
}

// orderSpec user type.
type orderSpec struct {
	// Sort order. Can be 'asc' or 'desc'.
	Direction *string `form:"direction,omitempty" json:"direction,omitempty" yaml:"direction,omitempty" xml:"direction,omitempty"`
	// Sort by property
	Property *string `form:"property,omitempty" json:"property,omitempty" yaml:"property,omitempty" xml:"property,omitempty"`
}

// Validate validates the orderSpec type instance.
func (ut *orderSpec) Validate() (err error) {
	if ut.Property == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "property"))
	}
	if ut.Direction == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "direction"))
	}
	return
}

// Publicize creates OrderSpec from orderSpec
func (ut *orderSpec) Publicize() *OrderSpec {
	var pub OrderSpec
	if ut.Direction != nil {
		pub.Direction = *ut.Direction
	}
	if ut.Property != nil {
		pub.Property = *ut.Property
	}
	return &pub
}

// OrderSpec user type.
type OrderSpec struct {
	// Sort order. Can be 'asc' or 'desc'.
	Direction string `form:"direction" json:"direction" yaml:"direction" xml:"direction"`
	// Sort by property
	Property string `form:"property" json:"property" yaml:"property" xml:"property"`
}

// Validate validates the OrderSpec type instance.
func (ut *OrderSpec) Validate() (err error) {
	if ut.Property == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "property"))
	}
	if ut.Direction == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "direction"))
	}
	return
}

// UpdateUserPayload
type updateUserPayload struct {
	// Status of user account
	Active *bool `form:"active,omitempty" json:"active,omitempty" yaml:"active,omitempty" xml:"active,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// External id of user
	ExternalID *string `form:"externalId,omitempty" json:"externalId,omitempty" yaml:"externalId,omitempty" xml:"externalId,omitempty"`
	// List of namespaces this user belongs to
	Namespaces []string `form:"namespaces,omitempty" json:"namespaces,omitempty" yaml:"namespaces,omitempty" xml:"namespaces,omitempty"`
	// List of organizations to which this user belongs to
	Organizations []string `form:"organizations,omitempty" json:"organizations,omitempty" yaml:"organizations,omitempty" xml:"organizations,omitempty"`
	// Password of user
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	// Roles of user
	Roles []string `form:"roles,omitempty" json:"roles,omitempty" yaml:"roles,omitempty" xml:"roles,omitempty"`
	// Token for email verification
	Token *string `form:"token,omitempty" json:"token,omitempty" yaml:"token,omitempty" xml:"token,omitempty"`
}

// Finalize sets the default values for updateUserPayload type instance.
func (ut *updateUserPayload) Finalize() {
	var defaultActive = false
	if ut.Active == nil {
		ut.Active = &defaultActive
	}
}

// Validate validates the updateUserPayload type instance.
func (ut *updateUserPayload) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 6, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 30, false))
		}
	}
	return
}

// Publicize creates UpdateUserPayload from updateUserPayload
func (ut *updateUserPayload) Publicize() *UpdateUserPayload {
	var pub UpdateUserPayload
	if ut.Active != nil {
		pub.Active = *ut.Active
	}
	if ut.Email != nil {
		pub.Email = ut.Email
	}
	if ut.ExternalID != nil {
		pub.ExternalID = ut.ExternalID
	}
	if ut.Namespaces != nil {
		pub.Namespaces = ut.Namespaces
	}
	if ut.Organizations != nil {
		pub.Organizations = ut.Organizations
	}
	if ut.Password != nil {
		pub.Password = ut.Password
	}
	if ut.Roles != nil {
		pub.Roles = ut.Roles
	}
	if ut.Token != nil {
		pub.Token = ut.Token
	}
	return &pub
}

// UpdateUserPayload
type UpdateUserPayload struct {
	// Status of user account
	Active bool `form:"active" json:"active" yaml:"active" xml:"active"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// External id of user
	ExternalID *string `form:"externalId,omitempty" json:"externalId,omitempty" yaml:"externalId,omitempty" xml:"externalId,omitempty"`
	// List of namespaces this user belongs to
	Namespaces []string `form:"namespaces,omitempty" json:"namespaces,omitempty" yaml:"namespaces,omitempty" xml:"namespaces,omitempty"`
	// List of organizations to which this user belongs to
	Organizations []string `form:"organizations,omitempty" json:"organizations,omitempty" yaml:"organizations,omitempty" xml:"organizations,omitempty"`
	// Password of user
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	// Roles of user
	Roles []string `form:"roles,omitempty" json:"roles,omitempty" yaml:"roles,omitempty" xml:"roles,omitempty"`
	// Token for email verification
	Token *string `form:"token,omitempty" json:"token,omitempty" yaml:"token,omitempty" xml:"token,omitempty"`
}

// Validate validates the UpdateUserPayload type instance.
func (ut *UpdateUserPayload) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 6, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 30, false))
		}
	}
	return
}
