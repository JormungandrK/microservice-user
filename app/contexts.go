// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "user": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/JormungandrK/user-microservice/design
// --out=$(GOPATH)/src/github.com/JormungandrK/user-microservice
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// AuthorizeOauth2ProviderContext provides the oauth2_provider authorize action context.
type AuthorizeOauth2ProviderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ClientID     string
	RedirectURI  *string
	ResponseType string
	Scope        *string
	State        *string
}

// NewAuthorizeOauth2ProviderContext parses the incoming request URL and body, performs validations and creates the
// context used by the oauth2_provider controller authorize action.
func NewAuthorizeOauth2ProviderContext(ctx context.Context, r *http.Request, service *goa.Service) (*AuthorizeOauth2ProviderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AuthorizeOauth2ProviderContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClientID := req.Params["client_id"]
	if len(paramClientID) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("client_id"))
	} else {
		rawClientID := paramClientID[0]
		rctx.ClientID = rawClientID
	}
	paramRedirectURI := req.Params["redirect_uri"]
	if len(paramRedirectURI) > 0 {
		rawRedirectURI := paramRedirectURI[0]
		rctx.RedirectURI = &rawRedirectURI
	}
	paramResponseType := req.Params["response_type"]
	if len(paramResponseType) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("response_type"))
	} else {
		rawResponseType := paramResponseType[0]
		rctx.ResponseType = rawResponseType
		if !(rctx.ResponseType == "code") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response_type`, rctx.ResponseType, []interface{}{"code"}))
		}
	}
	paramScope := req.Params["scope"]
	if len(paramScope) > 0 {
		rawScope := paramScope[0]
		rctx.Scope = &rawScope
	}
	paramState := req.Params["state"]
	if len(paramState) > 0 {
		rawState := paramState[0]
		rctx.State = &rawState
	}
	return &rctx, err
}

// Found sends a HTTP response with status code 302.
func (ctx *AuthorizeOauth2ProviderContext) Found() error {
	ctx.ResponseData.WriteHeader(302)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AuthorizeOauth2ProviderContext) BadRequest(r *OAuth2ErrorMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.oauth2.error+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// GetTokenOauth2ProviderContext provides the oauth2_provider get_token action context.
type GetTokenOauth2ProviderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *TokenPayload
}

// NewGetTokenOauth2ProviderContext parses the incoming request URL and body, performs validations and creates the
// context used by the oauth2_provider controller get_token action.
func NewGetTokenOauth2ProviderContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetTokenOauth2ProviderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetTokenOauth2ProviderContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetTokenOauth2ProviderContext) OK(r *TokenMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.oauth2.token+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetTokenOauth2ProviderContext) BadRequest(r *OAuth2ErrorMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.oauth2.error+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// CreateUserContext provides the user create action context.
type CreateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *UserPayload
}

// NewCreateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller create action.
func NewCreateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateUserContext) Created(r *Users) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateUserContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// FindUserContext provides the user find action context.
type FindUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *Credentials
}

// NewFindUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller find action.
func NewFindUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*FindUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := FindUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *FindUserContext) OK(r *Users) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *FindUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *FindUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *FindUserContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// FindByEmailUserContext provides the user findByEmail action context.
type FindByEmailUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *EmailPayload
}

// NewFindByEmailUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller findByEmail action.
func NewFindByEmailUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*FindByEmailUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := FindByEmailUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *FindByEmailUserContext) OK(r *Users) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *FindByEmailUserContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *FindByEmailUserContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetUserContext provides the user get action context.
type GetUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID string
}

// NewGetUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get action.
func NewGetUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetUserContext) OK(r *Users) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetUserContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetUserContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetMeUserContext provides the user getMe action context.
type GetMeUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetMeUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller getMe action.
func NewGetMeUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetMeUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetMeUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetMeUserContext) OK(r *Users) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetMeUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetMeUserContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetMeUserContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateUserContext provides the user update action context.
type UpdateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  string
	Payload *UserPayload
}

// NewUpdateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller update action.
func NewUpdateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateUserContext) OK(r *Users) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateUserContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateUserContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
