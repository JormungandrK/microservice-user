consumes:
- application/json
- application/xml
- application/gob
- application/x-gob
definitions:
  CreateUserPayload:
    description: CreateUserPayload
    example:
      active: true
      email: myles_lemke@gaylord.name
      externalId: Tenetur animi a sunt deserunt tempora quam.
      namespaces:
      - Amet occaecati.
      - Amet occaecati.
      organizations:
      - Et deleniti quis et consequuntur officiis.
      - Et deleniti quis et consequuntur officiis.
      - Et deleniti quis et consequuntur officiis.
      password: 34i2en7cd7
      roles:
      - Nam velit incidunt sunt sed provident.
      token: Et omnis neque consequatur.
    properties:
      active:
        default: false
        description: Status of user account
        example: true
        type: boolean
      email:
        description: Email of user
        example: myles_lemke@gaylord.name
        format: email
        type: string
      externalId:
        description: External id of user
        example: Tenetur animi a sunt deserunt tempora quam.
        type: string
      namespaces:
        description: List of namespaces this user belongs to
        example:
        - Amet occaecati.
        - Amet occaecati.
        items:
          example: Amet occaecati.
          type: string
        type: array
      organizations:
        description: List of organizations to which this user belongs to
        example:
        - Et deleniti quis et consequuntur officiis.
        - Et deleniti quis et consequuntur officiis.
        - Et deleniti quis et consequuntur officiis.
        items:
          example: Et deleniti quis et consequuntur officiis.
          type: string
        type: array
      password:
        description: Password of user
        example: 34i2en7cd7
        maxLength: 30
        minLength: 6
        type: string
      roles:
        description: Roles of user
        example:
        - Nam velit incidunt sunt sed provident.
        items:
          example: Nam velit incidunt sunt sed provident.
          type: string
        type: array
      token:
        description: Token for email verification
        example: Et omnis neque consequatur.
        type: string
    required:
    - email
    title: CreateUserPayload
    type: object
  Credentials:
    description: Email and password credentials
    example:
      email: alva@grahamklein.org
      password: kzsr2yeiek
    properties:
      email:
        description: Email of user
        example: alva@grahamklein.org
        format: email
        type: string
      password:
        description: Password of user
        example: kzsr2yeiek
        maxLength: 30
        minLength: 6
        type: string
    required:
    - email
    - password
    title: Credentials
    type: object
  EmailPayload:
    description: Email payload
    example:
      email: janie@gaylord.info
    properties:
      email:
        description: Email of user
        example: janie@gaylord.info
        format: email
        type: string
    required:
    - email
    title: EmailPayload
    type: object
  FilterPayload:
    example:
      filter:
      - property: Soluta omnis et pariatur consequatur accusantium occaecati.
        value: Harum ipsam impedit vitae sed.
      page: 2650884019839767564
      pageSize: 4871160491463818035
      sort:
        direction: Ut ipsam corrupti suscipit aliquid explicabo.
        property: Et maxime explicabo natus.
    properties:
      filter:
        description: Users filter.
        example:
        - property: Soluta omnis et pariatur consequatur accusantium occaecati.
          value: Harum ipsam impedit vitae sed.
        items:
          $ref: '#/definitions/FilterProperty'
        type: array
      page:
        description: Page number (1-based).
        example: 2650884019839767564
        format: int64
        type: integer
      pageSize:
        description: Items per page.
        example: 4871160491463818035
        format: int64
        type: integer
      sort:
        $ref: '#/definitions/OrderSpec'
    required:
    - page
    - pageSize
    title: FilterPayload
    type: object
  FilterProperty:
    example:
      property: Soluta omnis et pariatur consequatur accusantium occaecati.
      value: Harum ipsam impedit vitae sed.
    properties:
      property:
        description: Property name
        example: Soluta omnis et pariatur consequatur accusantium occaecati.
        type: string
      value:
        description: Property value to match
        example: Harum ipsam impedit vitae sed.
        type: string
    required:
    - property
    - value
    title: FilterProperty
    type: object
  ForgotPasswordPayload:
    description: Password Reset payload
    example:
      email: caleb@pagac.org
      password: mdm045mvqp
      token: Aut dignissimos dolorem quibusdam.
    properties:
      email:
        description: Email of the user
        example: caleb@pagac.org
        format: email
        type: string
      password:
        description: New password
        example: mdm045mvqp
        maxLength: 30
        minLength: 6
        type: string
      token:
        description: Forgot password token
        example: Aut dignissimos dolorem quibusdam.
        type: string
    required:
    - password
    - token
    title: ForgotPasswordPayload
    type: object
  OrderSpec:
    example:
      direction: Ut ipsam corrupti suscipit aliquid explicabo.
      property: Et maxime explicabo natus.
    properties:
      direction:
        description: Sort order. Can be 'asc' or 'desc'.
        example: Ut ipsam corrupti suscipit aliquid explicabo.
        type: string
      property:
        description: Sort by property
        example: Et maxime explicabo natus.
        type: string
    required:
    - property
    - direction
    title: OrderSpec
    type: object
  ResetToken:
    description: ResetToken media type (default view)
    example:
      email: Molestias maxime rem.
      id: Consequatur earum aut.
      token: Harum impedit enim commodi neque voluptatem reprehenderit.
    properties:
      email:
        description: User email
        example: Molestias maxime rem.
        type: string
      id:
        description: User ID
        example: Consequatur earum aut.
        type: string
      token:
        description: New token
        example: Harum impedit enim commodi neque voluptatem reprehenderit.
        type: string
    required:
    - id
    - email
    - token
    title: 'Mediatype identifier: resettokenmedia; view=default'
    type: object
  UpdateUserPayload:
    description: UpdateUserPayload
    example:
      active: false
      email: marques@spinka.org
      externalId: Voluptas eveniet sunt nemo qui nam.
      namespaces:
      - Voluptas sunt voluptatem doloremque id.
      - Voluptas sunt voluptatem doloremque id.
      - Voluptas sunt voluptatem doloremque id.
      organizations:
      - Facere vel.
      - Facere vel.
      - Facere vel.
      password: y9m9wo4go9
      roles:
      - Labore facere quasi et perspiciatis.
      token: Nihil libero.
    properties:
      active:
        default: false
        description: Status of user account
        example: false
        type: boolean
      email:
        description: Email of user
        example: marques@spinka.org
        format: email
        type: string
      externalId:
        description: External id of user
        example: Voluptas eveniet sunt nemo qui nam.
        type: string
      namespaces:
        description: List of namespaces this user belongs to
        example:
        - Voluptas sunt voluptatem doloremque id.
        - Voluptas sunt voluptatem doloremque id.
        - Voluptas sunt voluptatem doloremque id.
        items:
          example: Voluptas sunt voluptatem doloremque id.
          type: string
        type: array
      organizations:
        description: List of organizations to which this user belongs to
        example:
        - Facere vel.
        - Facere vel.
        - Facere vel.
        items:
          example: Facere vel.
          type: string
        type: array
      password:
        description: Password of user
        example: y9m9wo4go9
        maxLength: 30
        minLength: 6
        type: string
      roles:
        description: Roles of user
        example:
        - Labore facere quasi et perspiciatis.
        items:
          example: Labore facere quasi et perspiciatis.
          type: string
        type: array
      token:
        description: Token for email verification
        example: Nihil libero.
        type: string
    title: UpdateUserPayload
    type: object
  UsersPage:
    description: UsersPage media type (default view)
    example:
      items:
      - active: false
        email: maximillia.funk@skiles.name
        externalId: Occaecati quae odio rerum aliquid in sit.
        id: Ea quam optio placeat reprehenderit similique.
        namespaces:
        - Amet occaecati.
        - Amet occaecati.
        - Amet occaecati.
        organizations:
        - Et deleniti quis et consequuntur officiis.
        - Et deleniti quis et consequuntur officiis.
        roles:
        - Nam velit incidunt sunt sed provident.
        - Nam velit incidunt sunt sed provident.
        - Nam velit incidunt sunt sed provident.
      - active: false
        email: maximillia.funk@skiles.name
        externalId: Occaecati quae odio rerum aliquid in sit.
        id: Ea quam optio placeat reprehenderit similique.
        namespaces:
        - Amet occaecati.
        - Amet occaecati.
        - Amet occaecati.
        organizations:
        - Et deleniti quis et consequuntur officiis.
        - Et deleniti quis et consequuntur officiis.
        roles:
        - Nam velit incidunt sunt sed provident.
        - Nam velit incidunt sunt sed provident.
        - Nam velit incidunt sunt sed provident.
      page: 8637512787445997841
      pageSize: 1216021488875908955
    properties:
      items:
        description: Users list
        example:
        - active: false
          email: maximillia.funk@skiles.name
          externalId: Occaecati quae odio rerum aliquid in sit.
          id: Ea quam optio placeat reprehenderit similique.
          namespaces:
          - Amet occaecati.
          - Amet occaecati.
          - Amet occaecati.
          organizations:
          - Et deleniti quis et consequuntur officiis.
          - Et deleniti quis et consequuntur officiis.
          roles:
          - Nam velit incidunt sunt sed provident.
          - Nam velit incidunt sunt sed provident.
          - Nam velit incidunt sunt sed provident.
        - active: false
          email: maximillia.funk@skiles.name
          externalId: Occaecati quae odio rerum aliquid in sit.
          id: Ea quam optio placeat reprehenderit similique.
          namespaces:
          - Amet occaecati.
          - Amet occaecati.
          - Amet occaecati.
          organizations:
          - Et deleniti quis et consequuntur officiis.
          - Et deleniti quis et consequuntur officiis.
          roles:
          - Nam velit incidunt sunt sed provident.
          - Nam velit incidunt sunt sed provident.
          - Nam velit incidunt sunt sed provident.
        items:
          $ref: '#/definitions/users'
        type: array
      page:
        description: Page number (1-based).
        example: 8637512787445997841
        format: int64
        type: integer
      pageSize:
        description: Items per page.
        example: 1216021488875908955
        format: int64
        type: integer
    title: 'Mediatype identifier: application/mt.ckan.users-page+json; view=default'
    type: object
  error:
    description: Error response media type (default view)
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1458609066
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1458609066
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
  users:
    description: users media type (default view)
    example:
      active: false
      email: maximillia.funk@skiles.name
      externalId: Occaecati quae odio rerum aliquid in sit.
      id: Ea quam optio placeat reprehenderit similique.
      namespaces:
      - Amet occaecati.
      - Amet occaecati.
      - Amet occaecati.
      organizations:
      - Et deleniti quis et consequuntur officiis.
      - Et deleniti quis et consequuntur officiis.
      roles:
      - Nam velit incidunt sunt sed provident.
      - Nam velit incidunt sunt sed provident.
      - Nam velit incidunt sunt sed provident.
    properties:
      active:
        default: false
        description: Status of user account
        example: false
        type: boolean
      email:
        description: Email of user
        example: maximillia.funk@skiles.name
        format: email
        type: string
      externalId:
        description: External id of user
        example: Occaecati quae odio rerum aliquid in sit.
        type: string
      id:
        description: Unique user ID
        example: Ea quam optio placeat reprehenderit similique.
        type: string
      namespaces:
        description: List of namespaces this user belongs to
        example:
        - Amet occaecati.
        - Amet occaecati.
        - Amet occaecati.
        items:
          example: Amet occaecati.
          type: string
        type: array
      organizations:
        description: List of organizations to which this user belongs to
        example:
        - Et deleniti quis et consequuntur officiis.
        - Et deleniti quis et consequuntur officiis.
        items:
          example: Et deleniti quis et consequuntur officiis.
          type: string
        type: array
      roles:
        description: Roles of user
        example:
        - Nam velit incidunt sunt sed provident.
        - Nam velit incidunt sunt sed provident.
        - Nam velit incidunt sunt sed provident.
        items:
          example: Nam velit incidunt sunt sed provident.
          type: string
        type: array
    required:
    - id
    - email
    - roles
    - externalId
    - active
    title: 'Mediatype identifier: application/vnd.goa.user+json; view=default'
    type: object
host: localhost:8080
info:
  description: A service that provides basic access to the user data
  title: The user microservice
  version: "1.0"
paths:
  /:
    get:
      description: Retrieves all active users
      operationId: user#getAll
      parameters:
      - description: Limit users per page
        in: query
        name: limit
        required: false
        type: integer
      - description: Number of users to skip
        in: query
        name: offset
        required: false
        type: integer
      - description: Order by
        in: query
        name: order
        required: false
        type: string
      - enum:
        - asc
        - desc
        in: query
        name: sorting
        required: false
        type: string
      produces:
      - application/vnd.goa.error
      - text/plain
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: getAll user
      tags:
      - user
    post:
      description: Creates user
      operationId: user#create
      parameters:
      - description: CreateUserPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateUserPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.goa.user+json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/users'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: create user
      tags:
      - user
  /{userId}:
    get:
      description: Get user by id
      operationId: user#get
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/vnd.goa.error
      - application/vnd.goa.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: get user
      tags:
      - user
    put:
      description: Update user
      operationId: user#update
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: UpdateUserPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateUserPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.goa.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: update user
      tags:
      - user
  /find:
    post:
      description: Find a user by email+password
      operationId: user#find
      parameters:
      - description: Email and password credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/Credentials'
      produces:
      - application/vnd.goa.error
      - application/vnd.goa.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: find user
      tags:
      - user
  /find/email:
    post:
      description: Find a user by email
      operationId: user#findByEmail
      parameters:
      - description: Email payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/EmailPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.goa.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: findByEmail user
      tags:
      - user
  /list:
    post:
      description: Find (filter) users by some filter.
      operationId: user#findUsers
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/FilterPayload'
      produces:
      - application/mt.ckan.users-page+json
      - application/vnd.goa.error
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UsersPage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: findUsers user
      tags:
      - user
  /me:
    get:
      description: Retrieves the user information for the authenticated user
      operationId: user#getMe
      produces:
      - application/vnd.goa.error
      - application/vnd.goa.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: getMe user
      tags:
      - user
  /password/forgot:
    post:
      description: Forgot password action (sending email to user with link for resseting
        password)
      operationId: user#forgotPassword
      parameters:
      - description: Email payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/EmailPayload'
      produces:
      - application/vnd.goa.error
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: forgotPassword user
      tags:
      - user
    put:
      description: Password token validation & password update
      operationId: user#forgotPasswordUpdate
      parameters:
      - description: Password Reset payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/ForgotPasswordPayload'
      produces:
      - application/vnd.goa.error
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: forgotPasswordUpdate user
      tags:
      - user
  /swagger-ui/{filepath}:
    get:
      operationId: swagger#/swagger-ui/*filepath
      parameters:
      - description: Relative file path
        in: path
        name: filepath
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: Download swagger-ui/dist
  /swagger.json:
    get:
      operationId: swagger#/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.json
  /verification/reset:
    post:
      description: Reset verification token
      operationId: user#resetVerificationToken
      parameters:
      - description: Email payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/EmailPayload'
      produces:
      - application/vnd.goa.error
      - resettokenmedia
      responses:
        "200":
          description: Verification token reset
          schema:
            $ref: '#/definitions/ResetToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: resetVerificationToken user
      tags:
      - user
  /verify:
    get:
      description: Verify a user by token
      operationId: user#verify
      parameters:
      - description: Token
        in: query
        name: token
        required: false
        type: string
      produces:
      - application/vnd.goa.error
      - text/plain
      responses:
        "200":
          description: User is verified
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: verify user
      tags:
      - user
produces:
- application/json
- application/xml
- application/gob
- application/x-gob
responses:
  OK:
    description: OK
schemes:
- http
swagger: "2.0"
