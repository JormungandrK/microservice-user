consumes:
- application/json
- application/xml
- application/gob
- application/x-gob
definitions:
  CreateUserPayload:
    description: CreateUserPayload
    example:
      active: true
      email: vinnie.d'amore@kessler.net
      externalId: Voluptatum debitis iusto et.
      namespaces:
      - Quo quo amet occaecati ut.
      - Quo quo amet occaecati ut.
      - Quo quo amet occaecati ut.
      organizations:
      - Deleniti quis et.
      password: 789xuu49q
      roles:
      - Velit quaerat nam velit incidunt sunt.
      token: Reprehenderit quisquam maxime.
    properties:
      active:
        default: false
        description: Status of user account
        example: true
        type: boolean
      email:
        description: Email of user
        example: vinnie.d'amore@kessler.net
        format: email
        type: string
      externalId:
        description: External id of user
        example: Voluptatum debitis iusto et.
        type: string
      namespaces:
        description: List of namespaces this user belongs to
        example:
        - Quo quo amet occaecati ut.
        - Quo quo amet occaecati ut.
        - Quo quo amet occaecati ut.
        items:
          example: Quo quo amet occaecati ut.
          type: string
        type: array
      organizations:
        description: List of organizations to which this user belongs to
        example:
        - Deleniti quis et.
        items:
          example: Deleniti quis et.
          type: string
        type: array
      password:
        description: Password of user
        example: 789xuu49q
        maxLength: 30
        minLength: 6
        type: string
      roles:
        description: Roles of user
        example:
        - Velit quaerat nam velit incidunt sunt.
        items:
          example: Velit quaerat nam velit incidunt sunt.
          type: string
        type: array
      token:
        description: Token for email verification
        example: Reprehenderit quisquam maxime.
        type: string
    required:
    - email
    title: CreateUserPayload
    type: object
  Credentials:
    description: Email and password credentials
    example:
      email: myles@mooreschneider.name
      password: vhhtvx6y8
    properties:
      email:
        description: Email of user
        example: myles@mooreschneider.name
        format: email
        type: string
      password:
        description: Password of user
        example: vhhtvx6y8
        maxLength: 30
        minLength: 6
        type: string
    required:
    - email
    - password
    title: Credentials
    type: object
  EmailPayload:
    description: Email payload
    example:
      email: marianna_hartmann@oreillylebsack.org
    properties:
      email:
        description: Email of user
        example: marianna_hartmann@oreillylebsack.org
        format: email
        type: string
    required:
    - email
    title: EmailPayload
    type: object
  ResetToken:
    description: ResetToken media type (default view)
    example:
      email: Provident fugit corrupti dignissimos nisi voluptatum.
      id: Mollitia sint.
      token: Officia ipsum voluptatem.
    properties:
      email:
        description: User email
        example: Provident fugit corrupti dignissimos nisi voluptatum.
        type: string
      id:
        description: User ID
        example: Mollitia sint.
        type: string
      token:
        description: New token
        example: Officia ipsum voluptatem.
        type: string
    required:
    - id
    - email
    - token
    title: 'Mediatype identifier: resettokenmedia; view=default'
    type: object
  UpdateUserPayload:
    description: UpdateUserPayload
    example:
      active: false
      email: arnold@rueckerlabadie.org
      externalId: Earum voluptas aperiam nostrum at.
      namespaces:
      - Perferendis quos.
      organizations:
      - Quidem corrupti reprehenderit sit aut molestiae.
      - Quidem corrupti reprehenderit sit aut molestiae.
      - Quidem corrupti reprehenderit sit aut molestiae.
      password: o6xgbsyo5h
      roles:
      - Pariatur consequatur accusantium occaecati sint.
      - Pariatur consequatur accusantium occaecati sint.
      - Pariatur consequatur accusantium occaecati sint.
      token: Ipsam impedit vitae.
    properties:
      active:
        default: false
        description: Status of user account
        example: false
        type: boolean
      email:
        description: Email of user
        example: arnold@rueckerlabadie.org
        format: email
        type: string
      externalId:
        description: External id of user
        example: Earum voluptas aperiam nostrum at.
        type: string
      namespaces:
        description: List of namespaces this user belongs to
        example:
        - Perferendis quos.
        items:
          example: Perferendis quos.
          type: string
        type: array
      organizations:
        description: List of organizations to which this user belongs to
        example:
        - Quidem corrupti reprehenderit sit aut molestiae.
        - Quidem corrupti reprehenderit sit aut molestiae.
        - Quidem corrupti reprehenderit sit aut molestiae.
        items:
          example: Quidem corrupti reprehenderit sit aut molestiae.
          type: string
        type: array
      password:
        description: Password of user
        example: o6xgbsyo5h
        maxLength: 30
        minLength: 6
        type: string
      roles:
        description: Roles of user
        example:
        - Pariatur consequatur accusantium occaecati sint.
        - Pariatur consequatur accusantium occaecati sint.
        - Pariatur consequatur accusantium occaecati sint.
        items:
          example: Pariatur consequatur accusantium occaecati sint.
          type: string
        type: array
      token:
        description: Token for email verification
        example: Ipsam impedit vitae.
        type: string
    title: UpdateUserPayload
    type: object
  error:
    description: Error response media type (default view)
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1.458609066e+09
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1.458609066e+09
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
  users:
    description: users media type (default view)
    example:
      active: true
      email: thad@herman.name
      externalId: Ullam occaecati quae odio rerum aliquid in.
      id: Reprehenderit ea quam optio placeat.
      namespaces:
      - Quo quo amet occaecati ut.
      - Quo quo amet occaecati ut.
      - Quo quo amet occaecati ut.
      organizations:
      - Deleniti quis et.
      - Deleniti quis et.
      roles:
      - Velit quaerat nam velit incidunt sunt.
      - Velit quaerat nam velit incidunt sunt.
      - Velit quaerat nam velit incidunt sunt.
    properties:
      active:
        default: false
        description: Status of user account
        example: true
        type: boolean
      email:
        description: Email of user
        example: thad@herman.name
        format: email
        type: string
      externalId:
        description: External id of user
        example: Ullam occaecati quae odio rerum aliquid in.
        type: string
      id:
        description: Unique user ID
        example: Reprehenderit ea quam optio placeat.
        type: string
      namespaces:
        description: List of namespaces this user belongs to
        example:
        - Quo quo amet occaecati ut.
        - Quo quo amet occaecati ut.
        - Quo quo amet occaecati ut.
        items:
          example: Quo quo amet occaecati ut.
          type: string
        type: array
      organizations:
        description: List of organizations to which this user belongs to
        example:
        - Deleniti quis et.
        - Deleniti quis et.
        items:
          example: Deleniti quis et.
          type: string
        type: array
      roles:
        description: Roles of user
        example:
        - Velit quaerat nam velit incidunt sunt.
        - Velit quaerat nam velit incidunt sunt.
        - Velit quaerat nam velit incidunt sunt.
        items:
          example: Velit quaerat nam velit incidunt sunt.
          type: string
        type: array
    required:
    - id
    - email
    - roles
    - externalId
    - active
    title: 'Mediatype identifier: application/vnd.goa.user+json; view=default'
    type: object
host: localhost:8080
info:
  description: A service that provides basic access to the user data
  title: The user microservice
  version: "1.0"
paths:
  /swagger-ui/{filepath}:
    get:
      operationId: swagger#/swagger-ui/*filepath
      parameters:
      - description: Relative file path
        in: path
        name: filepath
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: Download swagger-ui/dist
  /swagger.json:
    get:
      operationId: swagger#/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.json
  /users:
    post:
      description: Creates user
      operationId: user#create
      parameters:
      - description: CreateUserPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateUserPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.goa.user+json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/users'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: create user
      tags:
      - user
  /users/{userId}:
    get:
      description: Get user by id
      operationId: user#get
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/vnd.goa.error
      - application/vnd.goa.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: get user
      tags:
      - user
    put:
      description: Update user
      operationId: user#update
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: UpdateUserPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateUserPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.goa.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: update user
      tags:
      - user
  /users/all:
    get:
      description: Retrieves all active users
      operationId: user#getAll
      produces:
      - application/vnd.goa.error
      - application/vnd.goa.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: getAll user
      tags:
      - user
  /users/find:
    post:
      description: Find a user by email+password
      operationId: user#find
      parameters:
      - description: Email and password credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/Credentials'
      produces:
      - application/vnd.goa.error
      - application/vnd.goa.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: find user
      tags:
      - user
  /users/find/email:
    post:
      description: Find a user by email
      operationId: user#findByEmail
      parameters:
      - description: Email payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/EmailPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.goa.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: findByEmail user
      tags:
      - user
  /users/me:
    get:
      description: Retrieves the user information for the authenticated user
      operationId: user#getMe
      produces:
      - application/vnd.goa.error
      - application/vnd.goa.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: getMe user
      tags:
      - user
  /users/verification/reset:
    post:
      description: Reset verification token
      operationId: user#resetVerificationToken
      parameters:
      - description: Email payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/EmailPayload'
      produces:
      - application/vnd.goa.error
      - resettokenmedia
      responses:
        "200":
          description: Verification token reset
          schema:
            $ref: '#/definitions/ResetToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: resetVerificationToken user
      tags:
      - user
  /users/verify:
    get:
      description: Verify a user by token
      operationId: user#verify
      parameters:
      - description: Token
        in: query
        name: token
        required: false
        type: string
      produces:
      - application/vnd.goa.error
      - plain/text
      responses:
        "200":
          description: User is verified
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: verify user
      tags:
      - user
produces:
- application/json
- application/xml
- application/gob
- application/x-gob
responses:
  OK:
    description: OK
    schema:
      $ref: '#/definitions/users'
schemes:
- http
swagger: "2.0"
